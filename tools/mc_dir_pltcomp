#!/usr/bin/env python3

# Plots compatibility distributions of pareto fronts in specified directory

import argparse
import glob
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from general import setup_plot_look, find_n_prods

def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('pf_dir', help='Path to directory with modcell output pareto front .csv input files')
    parser.add_argument('-t','--threshold', help='Compatibility threshold', default=0.5, type=float)
    parser.add_argument('-n','--normalize', help='Normalize compatibility to the total number of products',  action='store_true')
    parser.add_argument('-s','--swarm', help='add swarmplot on top',  action='store_true')
    #  Defaults
    default_output = "comp_<threshold>.svg"
    parser.add_argument('-o','--output', help='output file name', default=default_output, type=str)
    parser.add_argument('-f','--font', help='Font name', default='Helvetica', type=str)
    parser.add_argument('-fs','--font_size', help='font-size', default=12, type=int)
    parser.add_argument('-w','--width', help='Figure dimensions (inches)', default=3, type=float)
    parser.add_argument('-x','--height', help='Figure dimensions (inches)', default=3, type=float)
    parser.add_argument('-f2n','--file2name', help= 'Two column tsv file with no headers that maps from file name to desired label name', default='', type=str)
    args = parser.parse_args()
    if args.output == default_output:
        args.output = "comp_{}.svg".format(str(args.threshold).replace('.', 'p'))

    setup_plot_look(args)

    fnames = glob.glob("{}*.csv".format(args.pf_dir))
    fnames.sort()
    if args.normalize:
        n = find_n_prods(fnames[0])
    else:
        n = 1

    fname_noext = [fname[2:-4] for fname in fnames]
    if not args.file2name:
        x_labels = fname_noext
    else:
        with open(args.file2name, 'r+') as f:
            lines = f.readlines()
        f2n = {x.split('\t')[0]:x.split('\t')[1].strip() for x in lines}
        x_labels = [f2n[x] for x in fname_noext]

    compats = [get_compat_dist(pf_path, args.threshold)/n for pf_path in fnames]

    # Plot
    ax = sns.boxplot(data=compats, palette=sns.color_palette("pastel")[:4])
    if args.swarm:
        sns.swarmplot(data=compats, color=".25", size=3, ax=ax)

    ax.set_xticklabels(x_labels)
    ax.set_ylim(bottom=0)
    plt.xticks(rotation = 90)
    plt.ylabel("Compatibility")
    if args.normalize:
        vals = ax.get_yticks()
        ax.set_yticklabels(['{:,.0%}'.format(x) for x in vals])
    plt.tight_layout()
    plt.savefig(args.output)


def get_compat_dist(pf_path, threshold):
    df = pd.read_csv(pf_path)
    isge = df[df.columns[df.columns.str.contains("objective")]] >= threshold
    return isge.sum(1).values


if __name__ == '__main__':
   main()

