#!/usr/bin/env python3

""" Plots compatibility distributions of pareto fronts in specified directory """

import argparse
import glob
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.ticker as mtick
from general import setup_plot_look, find_n_prods
import ast

def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('pf_dir', help='Path to directory with modcell output pareto front .csv input files')
    parser.add_argument('-t','--threshold', help='Compatibility threshold', default=0.5, type=float)
    parser.add_argument('-n','--normalize', help='Normalize compatibility to the total number of products',  action='store_true')
    parser.add_argument('-s','--swarm', help='add swarmplot on top',  action='store_true')
    #  Defaults
    default_output = "comp_<threshold>.svg"
    parser.add_argument('-o','--output', help='output file name', default=default_output, type=str)
    parser.add_argument('-f','--font', help='Font name', default='Helvetica', type=str)
    parser.add_argument('-fs','--font_size', help='font-size', default=12, type=int)
    parser.add_argument('-w','--width', help='Figure dimensions (inches)', default=3, type=float)
    parser.add_argument('-x','--height', help='Figure dimensions (inches)', default=3, type=float)
    parser.add_argument('-f2n','--file2name', help= 'Two column tsv file with no headers that maps from file name to desired label name', default='', type=str)
    default_x_order = '[0,1,2,...]'
    parser.add_argument('-a', '--x_order', help='List to re-order x axis , e.g. [1,2,3,0] or \"[1, 2, 3 , 0]\"', type=str, default=default_x_order)
    args = parser.parse_args()
    if args.output == default_output:
        args.output = "comp_{}.svg".format(str(args.threshold).replace('.', 'p'))

    setup_plot_look(args)

    fnames = glob.glob("{}*.csv".format(args.pf_dir))
    fnames.sort()
    if args.normalize:
        factor = 100/find_n_prods(fnames[0])
    else:
        factor = 1

    fname_noext = [fname[2:-4] for fname in fnames]
    if not args.file2name:
        x_labels_r = fname_noext
    else:
        with open(args.file2name, 'r+') as f:
            lines = f.readlines()
        f2n = {x.split('\t')[0]:x.split('\t')[1].strip() for x in lines}
        x_labels_r = [f2n[x] for x in fname_noext]

    compats_r = [get_compat_dist(pf_path, args.threshold)*factor for pf_path in fnames]

    # Plot
    if args.x_order == default_x_order:
        compats = compats_r
        x_labels = x_labels_r
    else:
        # re-order
        x_order = ast.literal_eval(args.x_order)
        compats = [compats_r[i] for i in x_order]
        x_labels = [x_labels_r[i] for i in x_order]

    ax = sns.boxplot(data=compats, palette=sns.color_palette("pastel")[:4])
    if args.swarm:
        sns.swarmplot(data=compats, color=".25", size=3, ax=ax)

    ax.set_xticklabels(x_labels)
    ax.set_ylim(bottom=0)
    plt.xticks(rotation=90)
    plt.ylabel("Compatibility")
    if args.normalize:
        yticks = mtick.FormatStrFormatter('%.0f%%')
        ax.yaxis.set_major_formatter(yticks)

    plt.tight_layout()
    plt.savefig(args.output)


def get_compat_dist(pf_path, threshold):
    df = pd.read_csv(pf_path)
    isge = df[df.columns[df.columns.str.contains("objective")]] >= threshold
    return isge.sum(1).values


if __name__ == '__main__':
   main()

