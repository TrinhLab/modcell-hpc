#!/usr/bin/env python3

# Formats output table into more readable form:
# Solution index | Deletion_id | module_rxns                      | compatible_products | unique_compatible_products
#   5            | R1, R2, R5  | prod1 (R2) , prod3 (R3, R5)      | prod1, prod2, prod3 | prod3

# The unique_compatible_products is the the set of compatible products in the current design minus the set of compatible products in every other design. (TODO:not implemented yet)
# Potential features to add:
# - Add an option to use produt names instead of ids

import argparse
import pandas as pd

def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('pf_path', help='Path to modcell output pareto front .csv input file')
    parser.add_argument('-s', '--simple', help='Only keep interesting columns in the output', default=True, type=lambda x: (str(x).lower() == 'true'))
    parser.add_argument('-t','--threshold', help='Compatibility threshold', default=0.5, type=float)
    default_output = "<inpt_path>_format_t<compatibility threshold>.tsv"
    parser.add_argument('-o','--output', help='output file name', default=default_output, type=str)
    args = parser.parse_args()
    if args.output == default_output:
        args.output = "{}_format_t{}.tsv".format(args.pf_path.replace('.csv',''), str(args.threshold).replace('.', 'p'))

    df = pd.read_csv(args.pf_path)

    def map_modules(row):
        return ['{} ({})'.format(col_id.replace('(module)',''), rxn_id)
                for col_id,rxn_id in row.iteritems()
                if ('module' in col_id) and (isinstance(rxn_id, str))]

    df['module_rxns'] = [", ".join(map_modules(row)) for idx,row in df.iterrows()]

    def map_objectives(row, args):
        return [col_id.replace('(objective)','')
                for col_id, obj_val in row.iteritems()
                if ('objective' in col_id) and (obj_val >= args.threshold)]

    df['compatible_products'] = [", ".join(map_objectives(row, args)) for idx,row in df.iterrows()]

    if args.simple:
        df = df[["Solution index", 'Deletion_id', 'module_rxns', 'compatible_products']]

    df.to_csv(args.output, index=False, sep='\t')
    print(f"Output written to: {args.output}")


if __name__ == '__main__':
   main()
